@startuml model_entities

package model.entities {

  class Game {
    - player: List<Player>
    - numPlayers: int
    - resourceDeck: Stack<ResourceCard>
    - goldDeck: Stack<GoldCard>
    - revealedResourceCard: ResourceCard[2]
    - revealedGoldCard: GoldCard[2]
    - commonObjective: ObjectiveCard[2]

    + start()
    + end()
    + join(Player)
    + setPlayerArea(Player)
    + getPlayerArea(Player)
    + setCommonGoals()
    + getCommonGoal1()
    + getCommonGoal2()
    + setPlayer(Player)
    + setDecks()
    + drawCard(DrawingPosition): RGCard
    - drawResourceDeck(): ResourceCard
    - drawGoldDeck(): GoldCard
  }

  enum DrawingPosition {
    RESOURCEDECK, RESOURCE1, RESOURCE2, GOLDDECK, GOLD1, GOLD2
  }

  class Player {
    - nickname: String
    - status: PlayerStatus
    - playerData: PlayerArea

    + setNickname()
    + getNickname(): String
    + setStatus()
    + getStatus(): PlayerStatus
  }

  enum PlayerStatus {
    CONNECTED, DISCONNECTED, QUITTED
  }

  class PlayerArea {
    - cornersArea: Corner[82][82]
    - colorsArea: PlayableCard[82][82]
    - score: int
    - numResources: Map<Resources,int>
    - secretObjective: ObjectiveCard
    - hand: RGCard[3]

    + getCornerArea()
    + getColorsArea()
    + getScore()
    + getNumResorces()
    + getSecretObjective()
    + getHand()
    - checkObjective(IdObjective): int
    + placeCard(PlayableCard,int,int): void
    - checkPlaceability(PlayableCard,int,int): boolean
    + drawCard(DrawingPosition): RGCard
  }

  enum Resource {
    PLANT, ANIMAL, FUNGI, INSECT, QUILL, SCROLL, INK
  }

  class Corner {
    - resource: Resource
    - visibility: boolean

    + getResource()
    + getVisibility()
  }

  class ObjectiveCard {
    + objective: IdObjective

    + getObjective()
  }

  enum IdObjective {
      3PLANTS, 3ANIMALS, 3FUNGI, 3INSECTS,
      DIAGONALGREEN, DIAGONALBLUE, DIAGONALRED, DIAGONALPURPLE,
      LGREEN, LBLUE, LRED, LPURPLE,
      2QUILLS, 2SCROLLS, 2INKS, 3TREASURES
  }

  abstract class PlayableCard {
    - color: Color
    - ne: Corner
    - nw: Corner
    - se: Corner
    - sw: Corner

    + getColor()
    + getNe()
    + getNw()
    + getSe()
    + getSw()
  }

   enum Color {
    WHITE, GREEN, BLUE, RED, PURPLE
  }

  abstract class RGCard extends PlayableCard {
    - score: int

    + setScore()
    + getScore()
  }

  class ResourceCard extends RGCard {

  }

  class GoldCard extends RGCard {
    - constraint: Map<Resource,int>
    - bonus: BonusType

    + setConstraint()
    + getConstraint()
    + setBonus()
    + getBonus()
  }

  enum BonusType {
    NOTHING, QUILLS, SCROLLS, INKS, COVEREDCORNERS
  }

  class StarterCard extends PlayableCard {
    - fixedResources: List<Resource>
    - neBack: Corner
    - nwBack: Corner
    - seBack: Corner
    - swBack: Corner

    + getFixedResources()
    + getNeBack()
    + getNwBack()
    + getSeBack()
    + getSwBack()
  }
}

@enduml